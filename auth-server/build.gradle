apply from: '../build.gradle'
apply plugin: 'application'

mainClassName = "us.jsource.auth.AuthServerApplication"

dependencies {
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-security')
    compile("org.springframework.security.oauth:spring-security-oauth2")
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile("org.springframework.retry:spring-retry:${springRetryVersion}")
    compile("javax.xml.bind:jaxb-api:${jaxbVersion}")
    compile("com.sun.xml.bind:jaxb-core:${jaxbVersion}")
    compile("com.sun.xml.bind:jaxb-impl:${jaxbVersion}")
    compile("javax.activation:activation:${javaxActivationVersion}")
    runtime('org.postgresql:postgresql')
}


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/libs/Dockerfile')
    from 'openjdk:9'
    instruction 'RUN mkdir usr/local/auth-server'
    copyFile("auth-server-${version}.jar", "/usr/local/auth-server-${version}.jar")
    entryPoint 'java'
    defaultCommand '-jar',
            '-Dserver.port=${SERVER_PORT}',
            '-Deureka.client.service-url.defaultZone=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE}',
            '-Dspring.datasource.url=${SPRING_DATASOURCE_URL}',
            '-Dspring.datasource.username=${SPRING_DATASOURCE_USERNAME}',
            '-Dspring.datasource.password=${SPRING_DATASOURCE_PASSWORD}',
            "/usr/local/auth-server-${version}.jar"
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = "vadimdissa/auth-server:${version}"
}

build.finalizedBy(buildImage)